{"version":3,"sources":["config/index.js","config/app.js","api/users.ts","entities/User.ts","components/search-box/SearchBox.tsx","components/card/Card.tsx","api/monsters.ts","components/card-list/CardList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","app","name","process","title","api","users","robots","URL","all","a","fetch","response","json","body","Array","map","user","id","email","User","this","keyword","filter","toLocaleLowerCase","includes","SearchBox","hint","handleChange","className","type","placeholder","onChange","Card","monster","src","alt","CardList","monsters","key","App","state","event","setState","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUAIeA,G,MAFA,CAAEC,ICFJ,CAEXC,KAAMC,mBAGNC,MAAOD,mBAGPE,IAAK,CACHC,MAAOH,6CACPI,OAAQJ,2BCPNK,EAAMR,EAAOC,IAAII,IAAIC,OAAS,G,SAOrBG,I,2EAAf,8BAAAC,EAAA,sEACyBC,MAAMH,GAD/B,cACQI,EADR,gBAEqBA,EAASC,OAF9B,aAEQC,EAFR,kBAIsBC,OAJtB,yCAKWD,EAAKE,KAAI,SAACC,GAAD,MAAiB,CAC/BC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZjB,KAAMe,EAAKf,UARjB,gCAYS,IAZT,4C,0BCsCekB,E,WAlBb,aAAgB,yBAvBTF,QAuBQ,OAfRC,WAeQ,OAPRjB,UAOQ,EACbmB,KAAKH,GAAK,EACVG,KAAKF,MAAQ,GACbE,KAAKnB,KAAO,G,+CAUd,SAAsBoB,EAAiBhB,GACrC,OAAOA,EAAMiB,QAAO,SAACN,GAAD,OAAgBA,EAAKf,KAAKsB,oBAAoBC,SAASH,EAAQE,4B,oBCrCxE,SAASE,EAAT,GAA0E,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,aACzC,OACE,uBACEC,UAAU,SACVC,KAAK,SACLC,YAAaJ,EACbK,SAAUJ,I,YCLD,SAASK,EAAT,GAAqD,ICNjCf,EDMHgB,EAAmC,EAAnCA,QAC9B,OACE,sBAAKL,UAAU,iBAAf,UACE,qBAAKM,KCTwBjB,EDSDgB,EAAQhB,GCRlC,GAAN,OAAUlB,EAAOC,IAAII,IAAIE,OAAzB,YAAmCW,EAAnC,2BDQ6CkB,IAAI,oBAC7C,6BAAKF,EAAQhC,OACb,4BAAIgC,EAAQf,WELH,SAASkB,EAAT,GAA8D,IAAzCC,EAAwC,EAAxCA,SAClC,OACE,qBAAKT,UAAU,YAAf,SACGS,EAAStB,KAAI,SAACC,EAAYsB,GAAb,OACZ,cAACN,EAAD,CAAgBC,QAASjB,GAAdsB,Q,IC4BJC,E,4MA1BbC,MAAkB,CAChBnC,MAAO,GACPgB,QAAS,I,EAOXM,aAAe,SAACc,GACd,EAAKC,SAAS,CAAErB,QAASoB,EAAME,OAAOC,S,8FALxC,sBAAAnC,EAAA,kEACEW,KADF,SAC+BZ,IAD/B,yBACkBH,MADlB,WACOqC,SADP,gE,0EAQA,WAAwB,IAAD,EACMtB,KAAKoB,MAAxBnC,EADa,EACbA,MAAOgB,EADM,EACNA,QAEf,OACE,sBAAKO,UAAU,MAAf,UACE,kDACA,cAACH,EAAD,CAAWC,KAAM,qBAAsBC,aAAcP,KAAKO,eAC1D,cAACS,EAAD,CAAUC,SAAUlB,EAAKG,OAAOD,EAAShB,Y,GArB/BwC,aCCHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,QAM1Bb,M","file":"static/js/main.d6339835.chunk.js","sourcesContent":["import app from './app';\n\nconst config = { app };\n\nexport default config;\n","const app =  {\n  // Describe the project's name\n  name: process.env.REACT_APP_NAME,\n  \n  // Describe the page title\n  title: process.env.REACT_APP_TITLE,\n  \n  // PUBLIC API to get users and robot images data\n  api: {\n    users: process.env.REACT_APP_API_USERS,\n    robots: process.env.REACT_APP_API_ROBO_IMG\n  }\n}\n\nexport default app;\n","import config from '../config';\nimport User from '../entities/User';\n\nconst URL = config.app.api.users || '';\n\n/**\n * Get the list of users\n * \n * @returns {Promise<User[]>}\n */\nasync function all (): Promise<User[]> {\n  const response = await fetch(URL);\n  const body = await response.json();\n  \n  if (body instanceof Array) {\n    return body.map((user: User) => ({\n      id: user.id,\n      email: user.email,\n      name: user.name\n    }))\n  }\n\n  return [];\n}\n\nexport { all };\n","class User {\n  /**\n   * The user id's\n   * \n   * @var {string}\n   * @public\n   */\n  public id: number;\n\n  /**\n   * The user email's\n   * \n   * @var {string}\n   * @public\n   */\n  public email: string;\n\n  /**\n   * The user name's\n   * \n   * @var {string}\n   * @public\n   */\n  public name: string;\n\n  /**\n   * Create a new instance of this class\n   * \n   * @returns {void}\n   */\n  constructor () {\n    this.id = 0;\n    this.email = '';\n    this.name = '';\n  }\n\n  /**\n   * Get the list of users that already filterized\n   * by some keywords.\n   * \n   * @param {string} keyword\n   * @param {Array<User>} users\n   */\n  public static filter (keyword: string, users: Array<User>): Array<User> {\n    return users.filter((user: User) => user.name.toLocaleLowerCase().includes(keyword.toLocaleLowerCase()));\n  }\n}\n\nexport default User;\n","import './search-box.styles.css';\n\ntype SearchBoxProps = {\n  hint: string;\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport default function SearchBox ({ hint, handleChange }: SearchBoxProps): JSX.Element {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={hint}\n      onChange={handleChange}\n    />\n  )\n}\n","import { getMonstersAvatar } from '../../api/monsters';\nimport User from '../../entities/User';\nimport './card.styles.css';\n\ntype CardProps = {\n  monster: User\n};\n\nexport default function Card ({ monster }: CardProps): JSX.Element {\n  return (\n    <div className=\"card-container\">\n      <img src={getMonstersAvatar(monster.id)} alt=\"monsters-avatar\"/>\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  )\n}\n","import config from '../config';\n\nexport function getMonstersAvatar (id: number): string {\n  return `${config.app.api.robots}/${id}?set=set2&size=180x180`;\n}\n","import './card-list.styles.css';\nimport Card from '../card/Card';\nimport User from '../../entities/User';\n\ntype CardListProps = {\n  monsters: Array<User>\n};\n\nexport default function CardList ({ monsters }: CardListProps): JSX.Element {\n  return (\n    <div className=\"card-list\">\n      {monsters.map((user: User, key: number) => (\n        <Card key={key} monster={user} />\n      ))}\n    </div>\n  );\n}\n","import { Component } from 'react';\nimport './App.css';\n\nimport { all } from './api/users'\nimport User from './entities/User';\nimport SearchBox from './components/search-box/SearchBox';\nimport CardList from './components/card-list/CardList';\n\ntype AppState = {\n  users: Array<User>;\n  keyword: string;\n}\n\nclass App extends Component {\n  state: AppState = {\n    users: [],\n    keyword: ''\n  };\n\n  async componentDidMount () {\n    this.setState({ users: await all() });\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ keyword: event.target.value });\n  }\n  \n  render (): JSX.Element {\n    const { users, keyword } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox hint={\"Search monsters...\"} handleChange={this.handleChange} />\n        <CardList monsters={User.filter(keyword, users)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}